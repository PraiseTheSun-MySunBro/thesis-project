/*
 * This file is generated by jOOQ.
*/
package ee.ttu.unomomento.db.tables;


import ee.ttu.unomomento.db.Keys;
import ee.ttu.unomomento.db.Public;
import ee.ttu.unomomento.db.tables.records.DegreeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 1 -- No Degree, 2 -- Bachelor, 3 -- Master, 4 -- Doctoral, 5 -- Applied 
 * Higher Education
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Degree extends TableImpl<DegreeRecord> {

    private static final long serialVersionUID = -407190418;

    /**
     * The reference instance of <code>public.degree</code>
     */
    public static final Degree DEGREE = new Degree();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DegreeRecord> getRecordType() {
        return DegreeRecord.class;
    }

    /**
     * The column <code>public.degree.degree_code</code>.
     */
    public final TableField<DegreeRecord, Short> DEGREE_CODE = createField("degree_code", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.degree.ee_name</code>.
     */
    public final TableField<DegreeRecord, String> EE_NAME = createField("ee_name", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>public.degree.en_name</code>.
     */
    public final TableField<DegreeRecord, String> EN_NAME = createField("en_name", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * Create a <code>public.degree</code> table reference
     */
    public Degree() {
        this("degree", null);
    }

    /**
     * Create an aliased <code>public.degree</code> table reference
     */
    public Degree(String alias) {
        this(alias, DEGREE);
    }

    private Degree(String alias, Table<DegreeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Degree(String alias, Table<DegreeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "1 -- No Degree, 2 -- Bachelor, 3 -- Master, 4 -- Doctoral, 5 -- Applied Higher Education");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DegreeRecord> getPrimaryKey() {
        return Keys.PK_DEGREE_DEGREE_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DegreeRecord>> getKeys() {
        return Arrays.<UniqueKey<DegreeRecord>>asList(Keys.PK_DEGREE_DEGREE_CODE, Keys.AK_DEGREE_EE_NAME, Keys.AK_DEGREE_EN_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Degree as(String alias) {
        return new Degree(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Degree rename(String name) {
        return new Degree(name, null);
    }
}
