/*
 * This file is generated by jOOQ.
*/
package ee.ttu.unomomento.db.tables;


import ee.ttu.unomomento.db.Keys;
import ee.ttu.unomomento.db.Public;
import ee.ttu.unomomento.db.tables.records.AccountStateRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountState extends TableImpl<AccountStateRecord> {

    private static final long serialVersionUID = -1834208977;

    /**
     * The reference instance of <code>public.account_state</code>
     */
    public static final AccountState ACCOUNT_STATE = new AccountState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountStateRecord> getRecordType() {
        return AccountStateRecord.class;
    }

    /**
     * The column <code>public.account_state.account_state_code</code>.
     */
    public final TableField<AccountStateRecord, Short> ACCOUNT_STATE_CODE = createField("account_state_code", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.account_state.ee_name</code>.
     */
    public final TableField<AccountStateRecord, String> EE_NAME = createField("ee_name", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>public.account_state.en_name</code>.
     */
    public final TableField<AccountStateRecord, String> EN_NAME = createField("en_name", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * Create a <code>public.account_state</code> table reference
     */
    public AccountState() {
        this("account_state", null);
    }

    /**
     * Create an aliased <code>public.account_state</code> table reference
     */
    public AccountState(String alias) {
        this(alias, ACCOUNT_STATE);
    }

    private AccountState(String alias, Table<AccountStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountState(String alias, Table<AccountStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountStateRecord> getPrimaryKey() {
        return Keys.PK_ACCOUNT_STATE_ACCOUNT_STATE_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountStateRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountStateRecord>>asList(Keys.PK_ACCOUNT_STATE_ACCOUNT_STATE_CODE, Keys.AK_ACCOUNT_STATE_EE_NAME, Keys.AK_ACCOUNT_STATE_EN_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountState as(String alias) {
        return new AccountState(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountState rename(String name) {
        return new AccountState(name, null);
    }
}
